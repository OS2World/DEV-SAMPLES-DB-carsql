/*******************************************************************************
* FILE NAME: CarView.cpp                                                       *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     CarView- Car salesperson application                                     *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _IMCELCV_
#include <imcelcv.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _CAR_
#include "Carv.hpp"
#endif

#ifndef _IDSMCON_HPP_
#include "idsmcon.hpp"
#endif

#ifndef _ACCESSERROR_
#include "ccssrror.hpp"
#endif

#ifndef _IMSGBOX_
#include <imsgbox.hpp>
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _CARVIEW_
#include "CarView.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for CarViewConn3
//*****************************************************************************
class CarViewConn3 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(CarView * aSource, IDatastore * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == CarView::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to Datastore1(connect))");
         try {target->IDatastore::connect();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   CarView * source;
   IDatastore * target;


};   //CarViewConn3


//*****************************************************************************
// Class definition for CarViewConn2
//*****************************************************************************
class CarViewConn2 : public IObserver {
public:
   virtual  ~CarViewConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Car * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Car1(make) to EntryField2(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setMake(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Car1(make) to EntryField2(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->make());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Car::makeId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Car * source;
   IEntryField * target;
   Boolean aligning;


};   //CarViewConn2


//*****************************************************************************
// Class definition for CarViewConn13
//*****************************************************************************
class CarViewConn13 : public IObserver {
public:
   virtual  ~CarViewConn13(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Car * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Car1(model) to EntryField3(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setModel(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Car1(model) to EntryField3(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->model());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Car::modelId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Car * source;
   IEntryField * target;
   Boolean aligning;


};   //CarViewConn13


//*****************************************************************************
// Class definition for CarViewConn4
//*****************************************************************************
class CarViewConn4 : public IObserver {
public:
   virtual  ~CarViewConn4(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Car * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Car1(category) to EntryField4(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setCategory(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Car1(category) to EntryField4(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->category());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Car::categoryId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Car * source;
   IEntryField * target;
   Boolean aligning;


};   //CarViewConn4


//*****************************************************************************
// Class definition for CarViewConn5
//*****************************************************************************
class CarViewConn5 : public IObserver {
public:
   virtual  ~CarViewConn5(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Car * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Car1(colour) to EntryField5(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setColour(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Car1(colour) to EntryField5(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->colour());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Car::colourId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Car * source;
   IEntryField * target;
   Boolean aligning;


};   //CarViewConn5


//*****************************************************************************
// Class definition for CarViewConn15
//*****************************************************************************
class CarViewConn15 : public IObserver {
public:
   virtual  ~CarViewConn15(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IEntryField * aSource, Car * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : EntryField1(text) to Car1(license))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setText(target->license());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : EntryField1(text) to Car1(license))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setLicense(source->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IEntryField::textId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == Car::licenseId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IEntryField * source;
   Car * target;
   Boolean aligning;


};   //CarViewConn15


//*****************************************************************************
// Class definition for CarViewConn6
//*****************************************************************************
class CarViewConn6 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn6(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IDatastore * aSource, Car * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IDatastore::connectedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Datastore1(Connected) to Car1(retrieve))");
         try {target->retrieve();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IDatastore * source;
   Car * target;


};   //CarViewConn6

const INotificationId CarViewConn6::exceptionId = "CarViewConn6::exceptionId";

//*****************************************************************************
// Class definition for CarViewConn7
//*****************************************************************************
class CarViewConn7 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn7(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(CarViewConn6 * aSource, accessError * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == CarViewConn6::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn6(exceptionOccurred) to accessError1(obtainSqlcode))");
         try {target->obtainSqlcode(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   CarViewConn6 * source;
   accessError * target;


};   //CarViewConn7


//*****************************************************************************
// Class definition for CarViewConn23
//*****************************************************************************
class CarViewConn23 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn23(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, Car * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton3(buttonClickEvent) to Car1(update))");
         try {target->update();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   Car * target;


};   //CarViewConn23

const INotificationId CarViewConn23::exceptionId = "CarViewConn23::exceptionId";

//*****************************************************************************
// Class definition for CarViewConn14
//*****************************************************************************
class CarViewConn14 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn14(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(CarViewConn23 * aSource, accessError * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == CarViewConn23::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn23(exceptionOccurred) to accessError1(obtainSqlcode))");
         try {target->obtainSqlcode(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   CarViewConn23 * source;
   accessError * target;


};   //CarViewConn14


//*****************************************************************************
// Class definition for CarViewConn16
//*****************************************************************************
class CarViewConn16 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn16(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, Car * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton4(buttonClickEvent) to Car1(del))");
         try {target->del();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   Car * target;


};   //CarViewConn16

const INotificationId CarViewConn16::exceptionId = "CarViewConn16::exceptionId";

//*****************************************************************************
// Class definition for CarViewConn17
//*****************************************************************************
class CarViewConn17 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn17(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(CarViewConn16 * aSource, accessError * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == CarViewConn16::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn16(exceptionOccurred) to accessError1(obtainSqlcode))");
         try {target->obtainSqlcode(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   CarViewConn16 * source;
   accessError * target;


};   //CarViewConn17


//*****************************************************************************
// Class definition for CarViewConn18
//*****************************************************************************
class CarViewConn18 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn18(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, accessError * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton1(buttonClickEvent) to accessError1(resetSqlcode))");
         try {target->resetSqlcode();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   accessError * target;


};   //CarViewConn18


//*****************************************************************************
// Class definition for CarViewConn19
//*****************************************************************************
class CarViewConn19 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn19(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, Car * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton1(buttonClickEvent) to Car1(add))");
         try {target->add();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   Car * target;


};   //CarViewConn19

const INotificationId CarViewConn19::exceptionId = "CarViewConn19::exceptionId";

//*****************************************************************************
// Class definition for CarViewConn20
//*****************************************************************************
class CarViewConn20 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn20(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(CarViewConn19 * aSource, accessError * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == CarViewConn19::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn19(exceptionOccurred) to accessError1(obtainSqlcode))");
         try {target->obtainSqlcode(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   CarViewConn19 * source;
   accessError * target;


};   //CarViewConn20


//*****************************************************************************
// Class definition for CarViewConn29
//*****************************************************************************
class CarViewConn29 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn29(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, accessError * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton1(buttonClickEvent) to accessError1(checkSqlcode))");
         try {target->checkSqlcode();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   accessError * target;


};   //CarViewConn29


//*****************************************************************************
// Class definition for CarViewConn30
//*****************************************************************************
class CarViewConn30 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn30(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(accessError * aSource, IDatastore * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == accessError::sqlcode_0Id)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : accessError1(sqlcode_0) to Datastore1(commit))");
         try {target->IDatastore::commit();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   accessError * source;
   IDatastore * target;


};   //CarViewConn30


//*****************************************************************************
// Class definition for CarViewConn39
//*****************************************************************************
class CarViewConn39 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn39(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(accessError * aSource, IMessageBox * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == accessError::sqlcodeEventId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : accessError1(sqlcodeEvent) to MessageBox1(customLogic))");
         try {codeSnippet(&anEvent);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member functions
   //---------------------------------------------------------------------------
   void codeSnippet(const INotificationEvent* event)
      {
      target->show(source->errorText(),IMessageBox::okButton | IMessageBox::moveable ) ;
      };

   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   accessError * source;
   IMessageBox * target;


};   //CarViewConn39


//*****************************************************************************
// Class definition for CarViewConn21
//*****************************************************************************
class CarViewConn21 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn21(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, accessError * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton2(buttonClickEvent) to accessError1(resetSqlcode))");
         try {target->resetSqlcode();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   accessError * target;


};   //CarViewConn21


//*****************************************************************************
// Class definition for CarViewConn9
//*****************************************************************************
class CarViewConn9 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn9(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, Car * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton2(buttonClickEvent) to Car1(retrieve))");
         try {target->retrieve();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   Car * target;


};   //CarViewConn9

const INotificationId CarViewConn9::exceptionId = "CarViewConn9::exceptionId";

//*****************************************************************************
// Class definition for CarViewConn10
//*****************************************************************************
class CarViewConn10 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn10(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(CarViewConn9 * aSource, accessError * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == CarViewConn9::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn9(exceptionOccurred) to accessError1(obtainSqlcode))");
         try {target->obtainSqlcode(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   CarViewConn9 * source;
   accessError * target;


};   //CarViewConn10


//*****************************************************************************
// Class definition for CarViewConn22
//*****************************************************************************
class CarViewConn22 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn22(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, accessError * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton2(buttonClickEvent) to accessError1(checkSqlcode))");
         try {target->checkSqlcode();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   accessError * target;


};   //CarViewConn22


//*****************************************************************************
// Class definition for CarViewConn32
//*****************************************************************************
class CarViewConn32 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn32(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton5(buttonClickEvent) to EntryField1(removeAll))");
         try {target->removeAll();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IEntryField * target;


};   //CarViewConn32


//*****************************************************************************
// Class definition for CarViewConn33
//*****************************************************************************
class CarViewConn33 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn33(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton5(buttonClickEvent) to EntryField2(removeAll))");
         try {target->removeAll();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IEntryField * target;


};   //CarViewConn33


//*****************************************************************************
// Class definition for CarViewConn24
//*****************************************************************************
class CarViewConn24 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn24(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton5(buttonClickEvent) to EntryField3(removeAll))");
         try {target->removeAll();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IEntryField * target;


};   //CarViewConn24


//*****************************************************************************
// Class definition for CarViewConn25
//*****************************************************************************
class CarViewConn25 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn25(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton5(buttonClickEvent) to EntryField4(removeAll))");
         try {target->removeAll();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IEntryField * target;


};   //CarViewConn25


//*****************************************************************************
// Class definition for CarViewConn26
//*****************************************************************************
class CarViewConn26 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CarViewConn26(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton5(buttonClickEvent) to EntryField5(removeAll))");
         try {target->removeAll();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IEntryField * target;


};   //CarViewConn26


#pragma export (CarView::readyId)
const INotificationId CarView::readyId = "CarView::readyId";

#pragma export (CarView::partWindowId)
unsigned long CarView::partWindowId = 0;

//------------------------------------------------------------------------------
// CarView :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (CarView::defaultFramingSpec())
const IRectangle CarView::defaultFramingSpec()
{
   return(IRectangle(IPoint(2, IWindow::desktopWindow()->size().height() - 47 - 256),ISize(482, 256)));
}


//------------------------------------------------------------------------------
// CarView :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (CarView::defaultTitle())
IString CarView::defaultTitle()
{
   return("Car Record");
}


//------------------------------------------------------------------------------
// CarView :: CarView
//------------------------------------------------------------------------------
#pragma export (CarView::CarView(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
CarView::CarView(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow((partWindowId) ? partWindowId : id, parent, owner, rect, style, title)
{
   partWindowId = (partWindowId) ? partWindowId : id;
   iMultiCellCanvas2 = new IMultiCellCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iStaticText1 = new IStaticText(
      partWindowId+WNDOFFSET_CarView_StaticText1, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle(), 
      IStaticText::defaultStyle() | IControl::group | IControl::tabStop);
   iStaticText2 = new IStaticText(
      partWindowId+WNDOFFSET_CarView_StaticText2, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle(), 
      IStaticText::defaultStyle() | IControl::tabStop);
   iStaticText3 = new IStaticText(
      partWindowId+WNDOFFSET_CarView_StaticText3, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle(), 
      IStaticText::defaultStyle() | IControl::tabStop);
   iStaticText4 = new IStaticText(
      partWindowId+WNDOFFSET_CarView_StaticText4, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle(), 
      IStaticText::defaultStyle() | IControl::tabStop);
   iStaticText5 = new IStaticText(
      partWindowId+WNDOFFSET_CarView_StaticText5, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle(), 
      IStaticText::defaultStyle() | IControl::tabStop);
   iEntryField1 = new IEntryField(
      partWindowId+WNDOFFSET_CarView_EntryField1, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::group | IControl::tabStop);
   iEntryField2 = new IEntryField(
      partWindowId+WNDOFFSET_CarView_EntryField2, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iEntryField3 = new IEntryField(
      partWindowId+WNDOFFSET_CarView_EntryField3, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iEntryField4 = new IEntryField(
      partWindowId+WNDOFFSET_CarView_EntryField4, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iEntryField5 = new IEntryField(
      partWindowId+WNDOFFSET_CarView_EntryField5, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iPushButton1 = new IPushButton(
      partWindowId+WNDOFFSET_CarView_PushButton1, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle(), 
      IPushButton::defaultStyle() | IControl::group | IControl::tabStop);
   iPushButton2 = new IPushButton(
      partWindowId+WNDOFFSET_CarView_PushButton2, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle(), 
      IPushButton::defaultStyle() | IControl::tabStop);
   iPushButton3 = new IPushButton(
      partWindowId+WNDOFFSET_CarView_PushButton3, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle(), 
      IPushButton::defaultStyle() | IControl::tabStop);
   iPushButton4 = new IPushButton(
      partWindowId+WNDOFFSET_CarView_PushButton4, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle());
   iPushButton5 = new IPushButton(
      partWindowId+WNDOFFSET_CarView_PushButton5, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle());
   iCar1 = new Car();
   iDatastore1 = new IDatastore();
   iaccessError1 = new accessError();
   iMessageBox1 = new IMessageBox(this);

   conn3 = new CarViewConn3();
   conn2 = new CarViewConn2();
   conn13 = new CarViewConn13();
   conn4 = new CarViewConn4();
   conn5 = new CarViewConn5();
   conn15 = new CarViewConn15();
   conn6 = new CarViewConn6();
   conn7 = new CarViewConn7();
   conn23 = new CarViewConn23();
   conn14 = new CarViewConn14();
   conn16 = new CarViewConn16();
   conn17 = new CarViewConn17();
   conn18 = new CarViewConn18();
   conn19 = new CarViewConn19();
   conn20 = new CarViewConn20();
   conn29 = new CarViewConn29();
   conn30 = new CarViewConn30();
   conn39 = new CarViewConn39();
   conn21 = new CarViewConn21();
   conn9 = new CarViewConn9();
   conn10 = new CarViewConn10();
   conn22 = new CarViewConn22();
   conn32 = new CarViewConn32();
   conn33 = new CarViewConn33();
   conn24 = new CarViewConn24();
   conn25 = new CarViewConn25();
   conn26 = new CarViewConn26();

   this->setFocus();
   this->setClient(iMultiCellCanvas2);
   iMultiCellCanvas2->addToCell(iStaticText1, 1, 1, 1, 1);
   iMultiCellCanvas2->addToCell(iStaticText2, 1, 2, 1, 1);
   iMultiCellCanvas2->addToCell(iStaticText3, 1, 3, 1, 1);
   iMultiCellCanvas2->addToCell(iStaticText4, 1, 4, 1, 1);
   iMultiCellCanvas2->addToCell(iStaticText5, 1, 5, 1, 1);
   iMultiCellCanvas2->addToCell(iEntryField1, 3, 1, 1, 1);
   iMultiCellCanvas2->addToCell(iEntryField2, 3, 2, 1, 1);
   iMultiCellCanvas2->addToCell(iEntryField3, 3, 3, 1, 1);
   iMultiCellCanvas2->addToCell(iEntryField4, 3, 4, 1, 1);
   iMultiCellCanvas2->addToCell(iEntryField5, 3, 5, 1, 1);
   iMultiCellCanvas2->addToCell(iPushButton1, 5, 5, 1, 1);
   iMultiCellCanvas2->addToCell(iPushButton2, 5, 2, 1, 1);
   iMultiCellCanvas2->addToCell(iPushButton3, 5, 3, 1, 1);
   iMultiCellCanvas2->addToCell(iPushButton4, 5, 4, 1, 1);
   iMultiCellCanvas2->addToCell(iPushButton5, 5, 1, 1, 1);
   iMultiCellCanvas2->setColumnWidth(3, IMultiCellCanvas::defaultCell().width(), true);
   iMultiCellCanvas2->setColumnWidth(6, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas2->setRowHeight(1, 0, true);
   iMultiCellCanvas2->setRowHeight(2, IMultiCellCanvas::defaultCell().height(), true);
   iMultiCellCanvas2->setRowHeight(3, IMultiCellCanvas::defaultCell().height(), true);
   iMultiCellCanvas2->setRowHeight(4, IMultiCellCanvas::defaultCell().height(), true);
   iMultiCellCanvas2->setRowHeight(5, IMultiCellCanvas::defaultCell().height(), true);
   iStaticText1->setAlignment(IStaticText::centerCenter);
   iStaticText1->setText("License");
   iStaticText1->setMinimumSize(ISize(84, 30));
   iStaticText2->setAlignment(IStaticText::centerCenter);
   iStaticText2->setText("Make");
   iStaticText2->setMinimumSize(ISize(84, 30));
   iStaticText3->setAlignment(IStaticText::centerCenter);
   iStaticText3->setText("Model");
   iStaticText3->setMinimumSize(ISize(84, 30));
   iStaticText4->setAlignment(IStaticText::centerCenter);
   iStaticText4->setText("Category");
   iStaticText4->setMinimumSize(ISize(84, 30));
   iStaticText5->setAlignment(IStaticText::centerCenter);
   iStaticText5->setText("Colour");
   iStaticText5->setMinimumSize(ISize(84, 30));
   iEntryField1->setText("123-ABC");
   iEntryField1->setMinimumSize(ISize(180, 29));
   iEntryField2->setMinimumSize(ISize(180, 29));
   iEntryField3->setMinimumSize(ISize(180, 29));
   iEntryField4->setMinimumSize(ISize(180, 29));
   iEntryField5->setMinimumSize(ISize(180, 29));
   iPushButton1->setText("Add");
   iPushButton1->setMinimumSize(ISize(98, 30));
   iPushButton2->setText("Retrieve");
   iPushButton2->setMinimumSize(ISize(98, 30));
   iPushButton3->setText("Update");
   iPushButton3->setMinimumSize(ISize(98, 30));
   iPushButton4->setText("Delete");
   iPushButton4->setMinimumSize(ISize(98, 30));
   iPushButton5->setText("Clear");
   iDatastore1->setAuthentication("PASSWORD");
   iDatastore1->IDatastore::setDatastoreName("DAXSAMP");
   iDatastore1->setUserName("USERID");
   iaccessError1->setSqlcode(0);
}     //end constructor


//------------------------------------------------------------------------------
// CarView :: ~CarView
//------------------------------------------------------------------------------
#pragma export (CarView::~CarView())
CarView::~CarView()
{
   conn3->stopHandlingNotificationsFor(*this);
   conn2->stopHandlingNotificationsFor(*iCar1);
   conn2->stopHandlingNotificationsFor(*iEntryField2);
   conn13->stopHandlingNotificationsFor(*iCar1);
   conn13->stopHandlingNotificationsFor(*iEntryField3);
   conn4->stopHandlingNotificationsFor(*iCar1);
   conn4->stopHandlingNotificationsFor(*iEntryField4);
   conn5->stopHandlingNotificationsFor(*iCar1);
   conn5->stopHandlingNotificationsFor(*iEntryField5);
   conn15->stopHandlingNotificationsFor(*iEntryField1);
   conn15->stopHandlingNotificationsFor(*iCar1);
   conn6->stopHandlingNotificationsFor(*iDatastore1);
   conn7->stopHandlingNotificationsFor(*conn6);
   conn23->stopHandlingNotificationsFor(*iPushButton3);
   conn14->stopHandlingNotificationsFor(*conn23);
   conn16->stopHandlingNotificationsFor(*iPushButton4);
   conn17->stopHandlingNotificationsFor(*conn16);
   conn18->stopHandlingNotificationsFor(*iPushButton1);
   conn19->stopHandlingNotificationsFor(*iPushButton1);
   conn20->stopHandlingNotificationsFor(*conn19);
   conn29->stopHandlingNotificationsFor(*iPushButton1);
   conn30->stopHandlingNotificationsFor(*iaccessError1);
   conn39->stopHandlingNotificationsFor(*iaccessError1);
   conn21->stopHandlingNotificationsFor(*iPushButton2);
   conn9->stopHandlingNotificationsFor(*iPushButton2);
   conn10->stopHandlingNotificationsFor(*conn9);
   conn22->stopHandlingNotificationsFor(*iPushButton2);
   conn32->stopHandlingNotificationsFor(*iPushButton5);
   conn33->stopHandlingNotificationsFor(*iPushButton5);
   conn24->stopHandlingNotificationsFor(*iPushButton5);
   conn25->stopHandlingNotificationsFor(*iPushButton5);
   conn26->stopHandlingNotificationsFor(*iPushButton5);

   delete conn3;
   delete conn2;
   delete conn13;
   delete conn4;
   delete conn5;
   delete conn15;
   delete conn6;
   delete conn7;
   delete conn23;
   delete conn14;
   delete conn16;
   delete conn17;
   delete conn18;
   delete conn19;
   delete conn20;
   delete conn29;
   delete conn30;
   delete conn39;
   delete conn21;
   delete conn9;
   delete conn10;
   delete conn22;
   delete conn32;
   delete conn33;
   delete conn24;
   delete conn25;
   delete conn26;


   delete iMultiCellCanvas2;
   delete iStaticText1;
   delete iStaticText2;
   delete iStaticText3;
   delete iStaticText4;
   delete iStaticText5;
   delete iEntryField1;
   delete iEntryField2;
   delete iEntryField3;
   delete iEntryField4;
   delete iEntryField5;
   delete iPushButton1;
   delete iPushButton2;
   delete iPushButton3;
   delete iPushButton4;
   delete iPushButton5;
   delete iCar1;
   delete iDatastore1;
   delete iaccessError1;
   delete iMessageBox1;
}

//------------------------------------------------------------------------------
// CarView :: initializePart
//------------------------------------------------------------------------------
#pragma export (CarView::initializePart())
CarView & CarView::initializePart()
{
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// CarView :: makeConnections
//------------------------------------------------------------------------------
#pragma export (CarView::makeConnections())
Boolean CarView::makeConnections()
{
   this->enableNotification();
   iMultiCellCanvas2->enableNotification();
   iStaticText1->enableNotification();
   iStaticText2->enableNotification();
   iStaticText3->enableNotification();
   iStaticText4->enableNotification();
   iStaticText5->enableNotification();
   iEntryField1->enableNotification();
   iEntryField2->enableNotification();
   iEntryField3->enableNotification();
   iEntryField4->enableNotification();
   iEntryField5->enableNotification();
   iPushButton1->enableNotification();
   iPushButton2->enableNotification();
   iPushButton3->enableNotification();
   iPushButton4->enableNotification();
   iPushButton5->enableNotification();
   iCar1->enableNotification();
   iDatastore1->enableNotification();
   iaccessError1->enableNotification();

   conn3->initialize(this, iDatastore1);
   conn3->handleNotificationsFor(*this);
   conn2->initialize(iCar1, iEntryField2);
   conn2->handleNotificationsFor(*iCar1);
   conn2->handleNotificationsFor(*iEntryField2);
   conn13->initialize(iCar1, iEntryField3);
   conn13->handleNotificationsFor(*iCar1);
   conn13->handleNotificationsFor(*iEntryField3);
   conn4->initialize(iCar1, iEntryField4);
   conn4->handleNotificationsFor(*iCar1);
   conn4->handleNotificationsFor(*iEntryField4);
   conn5->initialize(iCar1, iEntryField5);
   conn5->handleNotificationsFor(*iCar1);
   conn5->handleNotificationsFor(*iEntryField5);
   conn15->initialize(iEntryField1, iCar1);
   conn15->handleNotificationsFor(*iEntryField1);
   conn15->handleNotificationsFor(*iCar1);
   conn6->initialize(iDatastore1, iCar1);
   conn6->handleNotificationsFor(*iDatastore1);
   conn7->initialize(conn6, iaccessError1);
   conn7->handleNotificationsFor(*conn6);
   conn23->initialize(iPushButton3, iCar1);
   conn23->handleNotificationsFor(*iPushButton3);
   conn14->initialize(conn23, iaccessError1);
   conn14->handleNotificationsFor(*conn23);
   conn16->initialize(iPushButton4, iCar1);
   conn16->handleNotificationsFor(*iPushButton4);
   conn17->initialize(conn16, iaccessError1);
   conn17->handleNotificationsFor(*conn16);
   conn18->initialize(iPushButton1, iaccessError1);
   conn18->handleNotificationsFor(*iPushButton1);
   conn19->initialize(iPushButton1, iCar1);
   conn19->handleNotificationsFor(*iPushButton1);
   conn20->initialize(conn19, iaccessError1);
   conn20->handleNotificationsFor(*conn19);
   conn29->initialize(iPushButton1, iaccessError1);
   conn29->handleNotificationsFor(*iPushButton1);
   conn30->initialize(iaccessError1, iDatastore1);
   conn30->handleNotificationsFor(*iaccessError1);
   conn39->initialize(iaccessError1, iMessageBox1);
   conn39->handleNotificationsFor(*iaccessError1);
   conn21->initialize(iPushButton2, iaccessError1);
   conn21->handleNotificationsFor(*iPushButton2);
   conn9->initialize(iPushButton2, iCar1);
   conn9->handleNotificationsFor(*iPushButton2);
   conn10->initialize(conn9, iaccessError1);
   conn10->handleNotificationsFor(*conn9);
   conn22->initialize(iPushButton2, iaccessError1);
   conn22->handleNotificationsFor(*iPushButton2);
   conn32->initialize(iPushButton5, iEntryField1);
   conn32->handleNotificationsFor(*iPushButton5);
   conn33->initialize(iPushButton5, iEntryField2);
   conn33->handleNotificationsFor(*iPushButton5);
   conn24->initialize(iPushButton5, iEntryField3);
   conn24->handleNotificationsFor(*iPushButton5);
   conn25->initialize(iPushButton5, iEntryField4);
   conn25->handleNotificationsFor(*iPushButton5);
   conn26->initialize(iPushButton5, iEntryField5);
   conn26->handleNotificationsFor(*iPushButton5);

   conn2->setTarget();
   conn13->setTarget();
   conn4->setTarget();
   conn5->setTarget();
   conn15->setTarget();
   return true;
}



